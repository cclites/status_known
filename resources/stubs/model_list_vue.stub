<!-- template to display lists of a collection type (users, invoices, .etc) -->
<template>
    <div>
        <b-overlay :show="show" rounded="sm">

            <record-count :%model%s="this.items.length"><record-count>

            <b-table striped hover
                     :items="items"
                     :per-page="perPage"
                     :current-page="currentPage"
                     :fields="fields"
                     @row-clicked="show%MODEL%s"
            >
            </b-table>

            <pagination
                :rows = "this.items.length"
                :perPage="this.perPage"
                :currentPage="this.currentPage"
            >
            </pagination>

        </b-overlay>
    </div>
</template>

<script>

    import pagination from '../utilities/Pagination';
    import record_count from '../utilities/RecordCount';

    export default {

        props: {},

        components: {pagination, record_count},

        mixins: [],

        data() {
            return {
                items: [],
                rows: '',
                currentPage: 1,
                perPage: 10,
                show: false,
                url: '%model%s-%directory%/',
                reportUrl : '%model%s/',
                fields: [],
            }
        },

        computed: {},

        methods: {

            get%MODEL%s() {

                this.show = true;

                axios.get(this.url)

                    .then( ({ response }) => {
                        this.items = response.data;
                        this.rows = this.items.length;
                    })
                    .catch(e => {})
                    .finally(() => {
                        this.show = false;
                    })

            },

            show%MODEL%s(row){

                this.show = true;
                window.location = this.reportUrl + row.%model%_id;
                this.show = false;
            }
        },

        mounted() {
            this.get%MODEL%s();
        },

        watch: {},
    }
</script>

<style scoped>

</style>
